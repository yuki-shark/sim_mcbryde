#!/usr/bin/env python
import rospy
import math
import numpy as np
import quaternion
import copy
import time
import tf.transformations
from std_msgs.msg import Float64
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
from std_srvs.srv import Empty

DEBUG = False

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class velocityPID:
    def __init__(self, _pgain, _igain, _dgain, _dt, _init = 0):
        self.pgain = _pgain
        self.igain = _igain
        self.dgain = _dgain
        self.dt = _dt
        self.init_value = copy.deepcopy(_init)
        self.error = [copy.deepcopy(_init), copy.deepcopy(_init), copy.deepcopy(_init)]
        self.ret = copy.deepcopy(_init)

    def reset(self):
        self.error = [copy.deepcopy(self.init_value), copy.deepcopy(self.init_value), copy.deepcopy(self.init_value)]
        self.ret = copy.deepcopy(self.init_value)

    def update(self, _error):
        self.error[1:] = self.error[:-1]
        self.error[0] = _error
        self.ret += self.pgain * (self.error[0] - self.error[1]) + \
                    self.igain * self.dt * self.error[0] + \
                    self.dgain / self.dt * (self.error[0] - 2 * self.error[1] + self.error[2])
        return self.ret

cart_controller = rospy.Publisher('/cmd_vel', Twist, queue_size=20)

num_cameras = rospy.get_param("move_loop_closure/num_cameras")
camera1_controller = rospy.Publisher('/cart_robot/camera1_joint_position_controller/command', Float64, queue_size=10)
if num_cameras > 1:
    camera2_controller = rospy.Publisher('/cart_robot/camera2_joint_position_controller/command', Float64, queue_size=10)
    if num_cameras > 2:
        camera3_controller = rospy.Publisher('/cart_robot/camera3_joint_position_controller/command', Float64, queue_size=10)

corridor = rospy.get_param("move_loop_closure/corridor")

#mcbryde5
if corridor=='narrow':
    points = [np.array([-6.0, 0.0]), np.array([-6.0, 7.0]),
              np.array([6.7, 7.0]), np.array([6.7, -7.7]),
              np.array([-6.0, -7.7]), np.array([-6.0, 7.0])]
elif corridor=='middle':
    points = [np.array([-5.3, 5.0]), np.array([-5.3, 6.2]),
              np.array([6.0, 6.2]), np.array([6.0, -7.2]),
              np.array([-5.3, -7.2]), np.array([-5.3, 6.2])]
else:
    points = [np.array([-5.0, 4.5]), np.array([-5.0, 6.0]),
              np.array([5.5, 6.0]), np.array([5.5, -6.5]),
              np.array([-5.0, -6.5]), np.array([-5.0, 6.0])]

# ROS Parameters
linear_speed = rospy.get_param("move_loop_closure/linear_speed", default=0.5)
angular_speed = rospy.get_param("move_loop_closure/angular_speed", default=0.2)
position_margin = rospy.get_param("move_loop_closure/position_margin", default=0.2)
angular_margin = rospy.get_param("move_loop_closure/angular_margin", default=0.03)
camera_angle = rospy.get_param("move_loop_closure/camera_angle")
publish_rate = rospy.get_param("move_loop_closure/publish_rate", default=100)

dt = 1.0 / publish_rate
delta_pos = linear_speed * dt
delta_yaw = angular_speed * dt

pos = None
yaw = None
quat = None
pos_pid_controller = velocityPID(0.85, 0.02, 0.15, dt, np.array([0.0, 0.0]))
yaw_pid_controller = velocityPID(0.85, 0.02, 0.15, dt, 0.0)

def getOdom(data):
    global pos
    global yaw
    global quat

    pos = np.array([data.pose.pose.position.x,
                       data.pose.pose.position.y])
    quat = np.quaternion(data.pose.pose.orientation.w,
                         data.pose.pose.orientation.x,
                         data.pose.pose.orientation.y,
                         data.pose.pose.orientation.z)
    euler = tf.transformations.euler_from_quaternion([quat.x, quat.y, quat.z, quat.w])
    yaw = euler[2]

@static_var("target_pos", copy.deepcopy(points[0]))
@static_var("target_yaw", 1.570796) # should be removed
@static_var("target_quat", np.quaternion(0.70710678, 0, 0, 0.70710678))
@static_var("goal_quat", np.quaternion(0.70710678, 0, 0, 0.70710678))
@static_var("current_state", 0)
@static_var("is_rotating", False)
@static_var("kill_flag", False)
def publishMsg():
    global pos
    global yaw
    global quat
    global pos_pid_controller
    global yaw_pid_controller

    pos_out_of_path = 0
    rot_out_of_path = 0

    if not publishMsg.is_rotating:
        distance = points[publishMsg.current_state + 1] - publishMsg.target_pos
        dist_normalized = distance / np.linalg.norm(distance)

        pos_error = publishMsg.target_pos - pos
        pos_out_of_path = abs(np.cross(dist_normalized, pos_error))

        if np.linalg.norm(distance) <= delta_pos:
            publishMsg.target_pos = points[publishMsg.current_state + 1]
            if publishMsg.current_state == len(points) - 2:
                publishMsg.kill_flag = True
            elif np.linalg.norm(pos_error) <= position_margin / 2:
                publishMsg.current_state += 1
                publishMsg.is_rotating = True
                distance = points[publishMsg.current_state + 1] - publishMsg.target_pos
                dist_normalized = distance / np.linalg.norm(distance)
                goal_yaw = np.arctan2(*dist_normalized[::-1])
                tf_quat = tf.transformations.quaternion_from_euler(0, 0, goal_yaw)
                publishMsg.goal_quat = np.quaternion(tf_quat[3], tf_quat[0], tf_quat[1], tf_quat[2])
                pos_pid_controller.reset()
                yaw_pid_controller.reset()
        else:
            publishMsg.target_pos += delta_pos * dist_normalized
    else:
        diff_quat = publishMsg.goal_quat * publishMsg.target_quat.inverse()
        diff_yaw = tf.transformations.euler_from_quaternion([diff_quat.x, diff_quat.y, diff_quat.z, diff_quat.w])[2]

        pos_out_of_path = np.linalg.norm(publishMsg.target_pos - pos)
        quat_error = publishMsg.target_quat * quat.inverse()
        yaw_error = tf.transformations.euler_from_quaternion([quat_error.x, quat_error.y, quat_error.z, quat_error.w])[2]

        if abs(diff_yaw) <= delta_yaw:
            publishMsg.target_quat = publishMsg.goal_quat
            if abs(yaw_error) <= angular_margin / 2:
                publishMsg.is_rotating = False
                pos_pid_controller.reset()
                yaw_pid_controller.reset()
        else:
            publishMsg.target_yaw += delta_yaw * np.sign(diff_yaw)
            tf_target_quat = tf.transformations.quaternion_from_euler(0, 0, publishMsg.target_yaw)
            publishMsg.target_quat = np.quaternion(tf_target_quat[3], tf_target_quat[0], tf_target_quat[1], tf_target_quat[2])

    error_quat = publishMsg.target_quat * quat.inverse()
    error_yaw = tf.transformations.euler_from_quaternion([error_quat.x, error_quat.y, error_quat.z, error_quat.w])[2]

    # Detect error
    if not publishMsg.is_rotating:
        rot_out_of_path = error_yaw
    if position_margin < pos_out_of_path or angular_margin < rot_out_of_path:
        rospy.logwarn("Cart robot is out of the path!")
        if DEBUG:
            print("pos_error: " + str(pos_out_of_path))
            print("rot_error: " + str(rot_out_of_path))
        publishMsg.kill_flag = True

    if publishMsg.kill_flag:
        rospy.logwarn("Call path_to_image_exporter")
        rospy.wait_for_service('path_to_image_exporter')
        path_to_image = rospy.ServiceProxy('path_to_image_exporter', Empty)
        path_to_image()
        rospy.wait_for_service('run_loop')
        run_loop = rospy.ServiceProxy('run_loop', Empty)
        run_loop()
        msg = Twist()
        cart_controller.publish(msg)

    cmd_pos_vel = pos_pid_controller.update(publishMsg.target_pos - pos)
    cmd_yaw_vel = yaw_pid_controller.update(error_yaw)

    # Transform from global frame to local frame
    rotation_mat = np.array([[np.cos(yaw), -np.sin(yaw)], [np.sin(yaw), np.cos(yaw)]])
    cmd_pos_vel = np.dot(cmd_pos_vel, rotation_mat)

    msg = Twist()
    msg.linear.x = cmd_pos_vel[0]
    msg.linear.y = cmd_pos_vel[1]
    msg.angular.z = cmd_yaw_vel
    cart_controller.publish(msg)

    if num_cameras == 1:
        # 1 Camera
        camera1_controller.publish(camera_angle)
    elif num_cameras == 2:
        # 2 Cameras
        camera1_controller.publish(camera_angle)
        camera2_controller.publish(-1 * camera_angle)
    elif num_cameras == 3:
        # 3 Cameras
        camera1_controller.publish(camera_angle)
        camera2_controller.publish(0)
        camera3_controller.publish(-1 * camera_angle)

def stopCommand():
    msg = Twist()
    cart_controller.publish(msg)
    rospy.loginfo("running finished")

if __name__ == '__main__':
    try:
        global pos
        rospy.loginfo("Cart robot started moving")
        rospy.init_node('move_loop_closure', anonymous=True)
        rospy.Subscriber("/odom", Odometry, getOdom)
        rospy.on_shutdown(stopCommand)
        rate = rospy.Rate(publish_rate)
        while pos is None:
            pass
        time.sleep(4)
        while not rospy.is_shutdown():
            publishMsg()
            rate.sleep()
    except rospy.ROSInterruptException:
        pass
